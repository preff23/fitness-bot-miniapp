const https = require('https');

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å Vercel...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url) {
  return new Promise((resolve, reject) => {
    https.get(url, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data
        });
      });
    }).on('error', (err) => {
      reject(err);
    });
  });
}

async function diagnose() {
  try {
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç...');
    const mainSite = await makeRequest('https://fitness-bot-miniapp-ged8.vercel.app/');
    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:', mainSite.statusCode);

    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint...');
    try {
      const health = await makeRequest('https://fitness-bot-miniapp-ged8.vercel.app/api/health');
      console.log('‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—Ç–∞—Ç—É—Å:', health.statusCode);
      console.log('üìÑ –û—Ç–≤–µ—Ç:', health.data.substring(0, 200) + '...');
    } catch (e) {
      console.log('‚ùå Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
    }

    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º telegram endpoint...');
    try {
      const telegram = await makeRequest('https://fitness-bot-miniapp-ged8.vercel.app/api/telegram');
      console.log('‚úÖ Telegram endpoint –¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:', telegram.statusCode);
    } catch (e) {
      console.log('‚ùå Telegram endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
    }

    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±—Ö—É–∫...');
    const webhookInfo = await makeRequest('https://api.telegram.org/bot8367003356:AAGL4Nr4xAMP5GVPoxTUvyZ6cx9n8JU096c/getWebhookInfo');
    console.log('‚úÖ –í–µ–±—Ö—É–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', JSON.parse(webhookInfo.data));

    console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –ï—Å–ª–∏ health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–µ—Ä–≤–µ—Ä–ª–µ—Å—Å —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª–∏—Å—å');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Vercel Dashboard ‚Üí Functions ‚Üí Logs');
    console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ Vercel Dashboard');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  }
}

diagnose();
