// const { db } = require('../lib/firebase'); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ

module.exports = async (req, res) => {
  console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram');
  
  try {
    const { message, channel_post } = req.body;
    
    if (message && message.text) {
      console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:', message.text);
      
      if (message.text === '/start') {
        const response = {
          method: 'sendMessage',
          chat_id: message.chat.id,
          text: '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä.\n–û—Ç–∫—Ä–æ–π —Ñ–∏—Ç–Ω–µ—Å-–º–µ–Ω—é:',
          reply_markup: {
            inline_keyboard: [[
              { 
                text: "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∏—Ç–Ω–µ—Å-–º–µ–Ω—é", 
                web_app: { 
                  url: "https://fitness-bot-miniapp-ged8.vercel.app/" 
                } 
              }
            ]]
          }
        };
        
        await fetch(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(response)
        });
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ /start');
      }
      
      if (message.text === '/menu') {
        const response = {
          method: 'sendMessage',
          chat_id: message.chat.id,
          text: '–û—Ç–∫—Ä–æ–π —Ñ–∏—Ç–Ω–µ—Å-–º–µ–Ω—é:',
          reply_markup: {
            inline_keyboard: [[
              { 
                text: "–û—Ç–∫—Ä—ã—Ç—å", 
                web_app: { 
                  url: "https://fitness-bot-miniapp-ged8.vercel.app/" 
                } 
              }
            ]]
          }
        };
        
        await fetch(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(response)
        });
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ /menu');
      }
    }
    
    // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞ ===
    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ - —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Firebase
    /*
    if (channel_post) {
      const post = channel_post;
      const channelUsername = process.env.CHANNEL_USERNAME;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
      if (post.chat && post.chat.username && 
          `@${post.chat.username}`.toLowerCase() === channelUsername.toLowerCase()) {
        
        const id = String(post.message_id);
        const payload = {
          id,
          date: post.date,
          text: post.text || post.caption || "",
          entities: post.entities || post.caption_entities || [],
          photos: (post.photo || []).map((p) => p.file_id),
          has_media: !!post.photo,
        };
        
        await db.ref(`/posts/${id}`).set(payload);
        console.log('üìù –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Firebase:', id);
      }
    }
    */
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
  
  res.status(200).json({ ok: true });
};
