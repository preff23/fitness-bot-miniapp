// api/posts.ts
import type { VercelRequest, VercelResponse } from "@vercel/node";

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHANNEL_USERNAME = "@Konovalsportlive";

export default async function handler(req: VercelRequest, res: VercelResponse) {
  res.setHeader("Cache-Control", "no-store");
  
  try {
    if (!BOT_TOKEN) {
      return res.status(200).json({ 
        ok: false, 
        error: "BOT_TOKEN not configured",
        items: [],
        total: 0
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    const chatUrl = `https://api.telegram.org/bot${BOT_TOKEN}/getChat?chat_id=${encodeURIComponent(CHANNEL_USERNAME)}`;
    const chatResponse = await fetch(chatUrl);
    const chatData = await chatResponse.json();
    
    if (!chatData.ok) {
      console.error("[posts] Failed to get channel info:", chatData.description);
      return res.status(200).json({
        ok: false,
        error: `Cannot access channel ${CHANNEL_USERNAME}: ${chatData.description}`,
        items: [],
        total: 0
      });
    }

    const channelInfo = chatData.result;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ getUpdates
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —ç—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    try {
      const updatesUrl = `https://api.telegram.org/bot${BOT_TOKEN}/getUpdates?allowed_updates=["channel_post"]&limit=100`;
      const updatesResponse = await fetch(updatesUrl);
      const updatesData = await updatesResponse.json();
      
      if (updatesData.ok && updatesData.result.length > 0) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        const channelPosts = updatesData.result
          .filter((update: any) => {
            const post = update.channel_post;
            if (!post) return false;
            return post.chat.id === channelInfo.id;
          })
          .map((update: any) => {
            const post = update.channel_post;
            return {
              id: String(post.message_id),
              date: post.date,
              text: post.text || post.caption || "",
              has_media: Boolean(post.photo || post.video || post.document),
              photos: (post.photo || []).map((p: any) => p.file_id),
              entities: post.entities || post.caption_entities || []
            };
          })
          .sort((a: any, b: any) => b.date - a.date); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)

        if (channelPosts.length > 0) {
          return res.status(200).json({
            ok: true,
            items: channelPosts.slice(0, 5), // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5 –ø–æ—Å—Ç–æ–≤
            total: channelPosts.length,
            channel: CHANNEL_USERNAME,
            source: "telegram_api"
          });
        }
      }
    } catch (apiError) {
      console.error("[posts] Telegram API error:", apiError);
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
    const fallbackPost = {
      id: "fallback_1",
      date: Math.floor(Date.now() / 1000) - 600, // 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
      text: `üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ ${CHANNEL_USERNAME}\n\nüí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é.\n\nüîó –ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –±–æ—Ç—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`,
      has_media: false,
      photos: [],
      entities: []
    };

    res.status(200).json({
      ok: true,
      items: [fallbackPost],
      total: 1,
      channel: CHANNEL_USERNAME,
      source: "fallback",
      message: "Bot needs admin rights in channel to fetch real posts"
    });

  } catch (error: any) {
    console.error("[posts error]", error);
    res.status(200).json({
      ok: false,
      error: error.message || "unknown",
      items: [],
      total: 0
    });
  }
}
