// api/channel-post.ts
import type { VercelRequest, VercelResponse } from "@vercel/node";

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHANNEL_USERNAME = "@Konovalsportlive";

export default async function handler(req: VercelRequest, res: VercelResponse) {
  res.setHeader("Cache-Control", "no-store");
  
  try {
    if (!BOT_TOKEN) {
      return res.status(200).json({ 
        ok: false, 
        error: "BOT_TOKEN not configured"
      });
    }

    // –°–ø–æ—Å–æ–± 1: –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ getUserProfilePhotos + getChat
    try {
      const chatUrl = `https://api.telegram.org/bot${BOT_TOKEN}/getChat?chat_id=${encodeURIComponent(CHANNEL_USERNAME)}`;
      const chatResponse = await fetch(chatUrl);
      const chatData = await chatResponse.json();
      
      if (chatData.ok) {
        const channelInfo = chatData.result;
        
        // –°–ø–æ—Å–æ–± 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ t.me —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª)
        const channelWebUrl = `https://t.me/s/${CHANNEL_USERNAME.replace('@', '')}`;
        
        try {
          const webResponse = await fetch(channelWebUrl, {
            headers: {
              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
          });
          
          if (webResponse.ok) {
            const html = await webResponse.text();
            
            // –ò—â–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π
            const messagePattern = /<div class="tgme_widget_message[^>]*data-post="[^"]*"[^>]*>(.*?)<\/div>\s*<\/div>\s*<\/div>/gs;
            const posts = [];
            let match;
            
            while ((match = messagePattern.exec(html)) !== null) {
              const messageHtml = match[1];
              
              // –ò—â–µ–º ID –ø–æ—Å—Ç–∞ –∏–∑ data-post –∞—Ç—Ä–∏–±—É—Ç–∞
              const postIdMatch = match[0].match(/data-post="([^"]+)"/);
              // –ò—â–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
              const textMatch = messageHtml.match(/<div class="tgme_widget_message_text[^>]*>(.*?)<\/div>/s);
              // –ò—â–µ–º –¥–∞—Ç—É
              const dateMatch = messageHtml.match(/<time[^>]*datetime="([^"]*)"[^>]*>/);
              
              if (textMatch && textMatch[1] && dateMatch && dateMatch[1] && postIdMatch && postIdMatch[1]) {
                // –û—á–∏—â–∞–µ–º HTML —Ç–µ–≥–∏ –∏ —ç–Ω—Ç–∏—Ç–∏
                const cleanText = textMatch[1]
                  .replace(/<[^>]*>/g, '')
                  .replace(/&quot;/g, '"')
                  .replace(/&amp;/g, '&')
                  .replace(/&lt;/g, '<')
                  .replace(/&gt;/g, '>')
                  .replace(/&#33;/g, '!')
                  .replace(/&#39;/g, "'")
                  .replace(/&#(\d+);/g, (match, num) => String.fromCharCode(parseInt(num)))
                  .trim();
                
                if (cleanText.length > 0) {
                  const postDate = new Date(dateMatch[1]).getTime() / 1000;
                  const postId = postIdMatch[1]; // —Ñ–æ—Ä–º–∞—Ç: "Konovalsportlive/123"
                  const messageId = postId.split('/')[1]; // –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
                  
                  posts.push({
                    id: messageId || `latest_${posts.length}`,
                    date: postDate,
                    text: cleanText,
                    has_media: false,
                    photos: [],
                    entities: [],
                    post_url: `https://t.me/${CHANNEL_USERNAME.replace('@', '')}/${messageId}`, // –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç
                    post_id: postId
                  });
                }
              }
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –±–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π
            if (posts.length > 0) {
              posts.sort((a, b) => b.date - a.date);
              const latestPost = posts[0];
              
              return res.status(200).json({
                ok: true,
                items: [latestPost],
                total: 1,
                channel: CHANNEL_USERNAME,
                source: "web_scraping",
                channel_info: {
                  title: channelInfo.title,
                  username: channelInfo.username,
                  subscribers: channelInfo.members_count || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                },
                debug: {
                  total_posts_found: posts.length,
                  latest_date: new Date(latestPost.date * 1000).toISOString()
                }
              });
            }
          }
        } catch (webError) {
          console.error("[channel-post] Web scraping error:", webError);
        }
        
        // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        return res.status(200).json({
          ok: true,
          items: [{
            id: "channel_info",
            date: Math.floor(Date.now() / 1000) - 300, // 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
            text: `üì∫ –ö–∞–Ω–∞–ª ${CHANNEL_USERNAME}\n\n${channelInfo.description || '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏'}\n\nüë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${channelInfo.members_count || '–º–Ω–æ–≥–æ'}\n\nüí° –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!`,
            has_media: false,
            photos: [],
            entities: []
          }],
          total: 1,
          channel: CHANNEL_USERNAME,
          source: "channel_info",
          channel_info: channelInfo
        });
      }
    } catch (apiError) {
      console.error("[channel-post] Telegram API error:", apiError);
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    const fallbackPost = {
      id: "fallback_konoval",
      date: Math.floor(Date.now() / 1000) - 600, // 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
      text: `üèÉ‚Äç‚ôÇÔ∏è –ö–∞–Ω–∞–ª ${CHANNEL_USERNAME}\n\nüì¢ –ó–¥–µ—Å—å –ø—É–±–ª–∏–∫—É—é—Ç—Å—è —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–ø–æ—Ä—Ç–∞ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!\n\nüîó –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é.\n\n‚ö†Ô∏è –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –±–æ—Ç—É –Ω—É–∂–Ω—ã –æ—Å–æ–±—ã–µ –ø—Ä–∞–≤–∞.`,
      has_media: false,
      photos: [],
      entities: []
    };

    res.status(200).json({
      ok: true,
      items: [fallbackPost],
      total: 1,
      channel: CHANNEL_USERNAME,
      source: "fallback"
    });

  } catch (error: any) {
    console.error("[channel-post error]", error);
    res.status(200).json({
      ok: false,
      error: error.message || "unknown",
      items: [],
      total: 0
    });
  }
}
