// api/latest-post.ts
import type { VercelRequest, VercelResponse } from "@vercel/node";

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHANNEL_USERNAME = process.env.CHANNEL_USERNAME || "@fitnesstest";
const CHANNEL_ID = process.env.CHANNEL_ID;

export default async function handler(req: VercelRequest, res: VercelResponse) {
  res.setHeader("Cache-Control", "no-store");
  
  try {
    if (!BOT_TOKEN) {
      return res.status(200).json({ 
        ok: false, 
        error: "BOT_TOKEN not configured" 
      });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–Ω–∞–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ username
    const chatId = CHANNEL_ID || CHANNEL_USERNAME;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    const chatUrl = `https://api.telegram.org/bot${BOT_TOKEN}/getChat?chat_id=${encodeURIComponent(chatId)}`;
    const chatResponse = await fetch(chatUrl);
    const chatData = await chatResponse.json();
    
    if (!chatData.ok) {
      return res.status(200).json({
        ok: false,
        error: "Failed to get channel info",
        details: chatData.description,
        chatId: chatId
      });
    }

    // –ú–æ–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const mockPosts = [
      {
        id: "1001",
        date: Math.floor(Date.now() / 1000) - 3600, // 1 —á–∞—Å –Ω–∞–∑–∞–¥
        text: "üî• –ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n\n–°–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–µ–º –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –∫–∞—Ä–¥–∏–æ –∏ —Å–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —Ä–∞–∑–º–∏–Ω–∫—É!",
        has_media: false,
        photos: [],
        entities: []
      },
      {
        id: "1002", 
        date: Math.floor(Date.now() / 1000) - 7200, // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        text: "üí™ –ü–æ–º–Ω–∏—Ç–µ: –≥–ª–∞–≤–Ω–æ–µ - –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ!\n\n–õ—É—á—à–µ –¥–µ–ª–∞—Ç—å –ø–æ 15 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á–µ–º 2 —á–∞—Å–∞ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é.",
        has_media: false,
        photos: [],
        entities: []
      },
      {
        id: "1003",
        date: Math.floor(Date.now() / 1000) - 86400, // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥  
        text: "ü•ó –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ = 70% —É—Å–ø–µ—Ö–∞\n\n–î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –ª—é–±–∏–º—ã–º–∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!",
        has_media: false,
        photos: [],
        entities: []
      }
    ];

    res.status(200).json({
      ok: true,
      items: mockPosts,
      channel: {
        id: chatData.result.id,
        title: chatData.result.title,
        username: chatData.result.username,
        type: chatData.result.type
      },
      message: "Showing mock posts (real Telegram API method for channel posts requires admin access)",
      total: mockPosts.length
    });

  } catch (error: any) {
    console.error("[latest-post error]", error);
    res.status(200).json({
      ok: false,
      error: error.message || "Unknown error"
    });
  }
}
